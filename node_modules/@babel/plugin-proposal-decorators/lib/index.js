"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _helperPluginUtils() {
  const data = require("@babel/helper-plugin-utils");

<<<<<<< Updated upstream
  _helperPluginUtils = function () {
    return data;
  };
=======
var _pluginSyntaxDecorators = require("@babel/plugin-syntax-decorators");
>>>>>>> Stashed changes

  return data;
}

function _pluginSyntaxDecorators() {
  const data = _interopRequireDefault(require("@babel/plugin-syntax-decorators"));

  _pluginSyntaxDecorators = function () {
    return data;
  };

  return data;
}

function _helperCreateClassFeaturesPlugin() {
  const data = require("@babel/helper-create-class-features-plugin");

  _helperCreateClassFeaturesPlugin = function () {
    return data;
  };

  return data;
}

var _transformerLegacy = require("./transformer-legacy");

var _transformer = require("./transformer-2022-03");

var _default = (0, _helperPluginUtils().declare)((api, options) => {
  api.assertVersion(7);
  {
    var {
      legacy
    } = options;
  }
  const {
    version
  } = options;

  if (legacy || version === "legacy") {
    return {
      name: "proposal-decorators",
<<<<<<< Updated upstream
      inherits: _pluginSyntaxDecorators().default,

      manipulateOptions({
        generatorOpts
      }) {
        generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
      },

=======
      inherits: _pluginSyntaxDecorators.default,
>>>>>>> Stashed changes
      visitor: _transformerLegacy.default
    };
  } else if (version === "2021-12" || version === "2022-03") {
    return (0, _transformer.default)(api, options, version);
  } else {
    return (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({
      name: "proposal-decorators",
      api,
      feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators,
      inherits: _pluginSyntaxDecorators.default
    });
  }
<<<<<<< Updated upstream

  return (0, _helperCreateClassFeaturesPlugin().createClassFeaturePlugin)({
    name: "proposal-decorators",
    feature: _helperCreateClassFeaturesPlugin().FEATURES.decorators,

    manipulateOptions({
      generatorOpts,
      parserOpts
    }) {
      parserOpts.plugins.push(["decorators", {
        decoratorsBeforeExport
      }]);
      generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
    }

  });
=======
>>>>>>> Stashed changes
});

exports.default = _default;

//# sourceMappingURL=index.js.map
