'use strict';

var _jsxAstUtils = require('jsx-ast-utils');

<<<<<<< Updated upstream
var _arrayIncludes = require('array-includes');
=======
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
>>>>>>> Stashed changes

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _has = require('has');

<<<<<<< Updated upstream
var _has2 = _interopRequireDefault(_has);
=======
var _getElementType = _interopRequireDefault(require("../util/getElementType"));

var _getExplicitRole = _interopRequireDefault(require("../util/getExplicitRole"));
>>>>>>> Stashed changes

var _getExplicitRole = require('../util/getExplicitRole');

var _getExplicitRole2 = _interopRequireDefault(_getExplicitRole);

var _getImplicitRole = require('../util/getImplicitRole');

var _getImplicitRole2 = _interopRequireDefault(_getImplicitRole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorMessage = function errorMessage(element, implicitRole) {
  return 'The element ' + element + ' has an implicit role of ' + implicitRole + '. Defining this explicitly is redundant and should be avoided.';
}; /**
    * @fileoverview Enforce explicit role property is not the
    * same as implicit/default role property on element.
    * @author Ethan Cohen <@evcohen>
    * 
    */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

<<<<<<< Updated upstream
var DEFAULT_ROLE_EXCEPTIONS = { nav: ['navigation'] };

module.exports = {
=======
var DEFAULT_ROLE_EXCEPTIONS = {
  nav: ['navigation']
};
var _default = {
>>>>>>> Stashed changes
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md',
      description: 'Enforce explicit role property is not the same as implicit/default role property on element.'
    },
    schema: [{
      type: 'object',
      additionalProperties: {
        type: 'array',
        items: {
          type: 'string'
        },
        uniqueItems: true
      }
    }]
  },

  create: function create(context) {
    var options = context.options;
<<<<<<< Updated upstream

    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var type = (0, _jsxAstUtils.elementType)(node);
        var implicitRole = (0, _getImplicitRole2.default)(type, node.attributes);
        var explicitRole = (0, _getExplicitRole2.default)(type, node.attributes);
=======
    var elementType = (0, _getElementType["default"])(context);
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var type = elementType(node);
        var implicitRole = (0, _getImplicitRole["default"])(type, node.attributes);
        var explicitRole = (0, _getExplicitRole["default"])(type, node.attributes);
>>>>>>> Stashed changes

        if (!implicitRole || !explicitRole) {
          return;
        }

        if (implicitRole === explicitRole) {
          var allowedRedundantRoles = options[0] || {};
          var redundantRolesForElement = void 0;

          if ((0, _has2.default)(allowedRedundantRoles, type)) {
            redundantRolesForElement = allowedRedundantRoles[type];
          } else {
            redundantRolesForElement = DEFAULT_ROLE_EXCEPTIONS[type] || [];
          }

          if ((0, _arrayIncludes2.default)(redundantRolesForElement, implicitRole)) {
            return;
          }

          context.report({
            node: node,
            message: errorMessage(type, implicitRole.toLowerCase())
          });
        }
      }
    };
  }
};
exports["default"] = _default;
module.exports = exports.default;