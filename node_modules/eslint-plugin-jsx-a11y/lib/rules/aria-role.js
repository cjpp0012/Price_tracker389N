'use strict';

var _ariaQuery = require('aria-query');

<<<<<<< Updated upstream
var _jsxAstUtils = require('jsx-ast-utils');
=======
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
>>>>>>> Stashed changes

var _schemas = require('../util/schemas');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * @fileoverview Enforce aria role attribute is valid.
                                                                                                                                                                                                     * @author Ethan Cohen
                                                                                                                                                                                                     */

<<<<<<< Updated upstream
=======
var _getElementType = _interopRequireDefault(require("../util/getElementType"));

var _schemas = require("../util/schemas");

/**
 * @fileoverview Enforce aria role attribute is valid.
 * @author Ethan Cohen
 */
>>>>>>> Stashed changes
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

var errorMessage = 'Elements with ARIA roles must use a valid, non-abstract ARIA role.';

var schema = (0, _schemas.generateObjSchema)({
  allowedInvalidRoles: {
    items: {
      type: 'string'
    },
    type: 'array',
    uniqueItems: true
  },
  ignoreNonDOM: {
    type: 'boolean',
    default: false
  }
});
<<<<<<< Updated upstream

module.exports = {
=======
var _default = {
>>>>>>> Stashed changes
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md',
      description: 'Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.'
    },
    schema: [schema]
  },

  create: function create(context) {
    var options = context.options[0] || {};
    var ignoreNonDOM = !!options.ignoreNonDOM;
    var allowedInvalidRoles = new Set(options.allowedInvalidRoles || []);
    var validRoles = new Set((0, _toConsumableArray2["default"])(_ariaQuery.roles.keys()).filter(function (role) {
      return _ariaQuery.roles.get(role)["abstract"] === false;
    }));
    var elementType = (0, _getElementType["default"])(context);
    return {
      JSXAttribute: function JSXAttribute(attribute) {
        // If ignoreNonDOM and the parent isn't DOM, don't run rule.
        if (ignoreNonDOM) {
<<<<<<< Updated upstream
          var type = (0, _jsxAstUtils.elementType)(attribute.parent);
=======
          var type = elementType(attribute.parent);

>>>>>>> Stashed changes
          if (!_ariaQuery.dom.get(type)) {
            return;
          }
        }

        // Get prop name
        var name = (0, _jsxAstUtils.propName)(attribute).toUpperCase();

        if (name !== 'ROLE') {
          return;
        }

        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);

        // If value is undefined, then the role attribute will be dropped in the DOM.
        // If value is null, then getLiteralAttributeValue is telling us that the
        // value isn't in the form of a literal.
        if (value === undefined || value === null) {
          return;
        }

<<<<<<< Updated upstream
        var normalizedValues = String(value).toLowerCase().split(' ');
        var validRoles = [].concat(_toConsumableArray(_ariaQuery.roles.keys())).filter(function (role) {
          return _ariaQuery.roles.get(role).abstract === false;
        });
        var isValid = normalizedValues.every(function (val) {
          return validRoles.indexOf(val) > -1;
=======
        var values = String(value).split(' ');
        var isValid = values.every(function (val) {
          return allowedInvalidRoles.has(val) || validRoles.has(val);
>>>>>>> Stashed changes
        });

        if (isValid === true) {
          return;
        }

        context.report({
          node: attribute,
          message: errorMessage
        });
      }
    };
  }
};
exports["default"] = _default;
module.exports = exports.default;