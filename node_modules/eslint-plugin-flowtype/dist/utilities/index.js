'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spacingFixers = exports.quoteName = exports.iterateFunctionNodes = exports.isFlowFileAnnotation = exports.isFlowFile = exports.getTokenBeforeParens = exports.getTokenAfterParens = exports.getParameterName = exports.fuzzyStringMatch = exports.checkFlowFileAnnotation = undefined;

var _checkFlowFileAnnotation = require('./checkFlowFileAnnotation');

Object.defineProperty(exports, 'checkFlowFileAnnotation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_checkFlowFileAnnotation).default;
  }
});

var _fuzzyStringMatch = require('./fuzzyStringMatch');

Object.defineProperty(exports, 'fuzzyStringMatch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_fuzzyStringMatch).default;
  }
});

var _getParameterName = require('./getParameterName.js');

Object.defineProperty(exports, 'getParameterName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getParameterName).default;
  }
});

var _getTokenAfterParens = require('./getTokenAfterParens');

Object.defineProperty(exports, 'getTokenAfterParens', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getTokenAfterParens).default;
  }
});

var _getTokenBeforeParens = require('./getTokenBeforeParens');

Object.defineProperty(exports, 'getTokenBeforeParens', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getTokenBeforeParens).default;
  }
});
<<<<<<< Updated upstream

var _isFlowFile = require('./isFlowFile.js');

Object.defineProperty(exports, 'isFlowFile', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isFlowFile).default;
  }
});

var _isFlowFileAnnotation = require('./isFlowFileAnnotation.js');

Object.defineProperty(exports, 'isFlowFileAnnotation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isFlowFileAnnotation).default;
=======
Object.defineProperty(exports, "isFlowFileAnnotation", {
  enumerable: true,
  get: function () {
    return _isFlowFileAnnotation.default;
  }
});
Object.defineProperty(exports, "isNoFlowFile", {
  enumerable: true,
  get: function () {
    return _isNoFlowFile.default;
>>>>>>> Stashed changes
  }
});

var _iterateFunctionNodes = require('./iterateFunctionNodes.js');

Object.defineProperty(exports, 'iterateFunctionNodes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_iterateFunctionNodes).default;
  }
});

var _quoteName = require('./quoteName');

Object.defineProperty(exports, 'quoteName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_quoteName).default;
  }
});

var _spacingFixers = require('./spacingFixers');

var spacingFixers = _interopRequireWildcard(_spacingFixers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

<<<<<<< Updated upstream
exports.spacingFixers = spacingFixers;
=======
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
>>>>>>> Stashed changes
