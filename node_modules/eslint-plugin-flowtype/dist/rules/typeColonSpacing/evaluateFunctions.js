'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

<<<<<<< Updated upstream
var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utilities = require('../../utilities');

var _evaluateTypical = require('./evaluateTypical');

var _evaluateTypical2 = _interopRequireDefault(_evaluateTypical);

var _evaluateReturnType = require('./evaluateReturnType');

var _evaluateReturnType2 = _interopRequireDefault(_evaluateReturnType);
=======
var _utilities = require("../../utilities");

var _evaluateReturnType = _interopRequireDefault(require("./evaluateReturnType"));
>>>>>>> Stashed changes

var _evaluateTypical = _interopRequireDefault(require("./evaluateTypical"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

<<<<<<< Updated upstream
exports.default = (0, _utilities.iterateFunctionNodes)(function (context, report) {
  var checkParam = (0, _evaluateTypical2.default)(context, report, 'parameter');
  var checkReturnType = (0, _evaluateReturnType2.default)(context, report);
=======
var _default = (0, _utilities.iterateFunctionNodes)((context, report) => {
  const checkParam = (0, _evaluateTypical.default)(context, report, 'parameter');
  const checkReturnType = (0, _evaluateReturnType.default)(context, report);
  return functionNode => {
    for (const param of functionNode.params) {
      checkParam(param);
    }
>>>>>>> Stashed changes

  return function (functionNode) {
    _lodash2.default.forEach(functionNode.params, checkParam);
    checkReturnType(functionNode);
  };
});
module.exports = exports['default'];