'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var schema = [{
  type: 'string'
}];
<<<<<<< Updated upstream
=======
const message = '$FlowFixMe is treated as `any` and must be fixed.';
>>>>>>> Stashed changes

var message = '$FlowFixMe is treated as `any` and should be fixed.';

var isIdentifier = function isIdentifier(node, name) {
  return node && node.type === 'Identifier' && node.name.match(name);
};

<<<<<<< Updated upstream
var create = function create(context) {
  var allowedPattern = context.options[0] ? new RegExp(context.options[0]) : null;
  var extraMessage = allowedPattern ? ' Fix it or match `' + allowedPattern.toString() + '`.' : '';
=======
const create = context => {
  const allowedPattern = context.options[0] ? new RegExp(context.options[0], 'u') : null;
  const extraMessage = allowedPattern ? ' Fix it or match `' + allowedPattern.toString() + '`.' : '';
>>>>>>> Stashed changes

  var passesExtraRegex = function passesExtraRegex(value) {
    if (!allowedPattern) {
      return false;
    }

    return value.match(allowedPattern);
  };

  var handleComment = function handleComment(comment) {
    var value = comment.value.trim();

    if (/\$FlowFixMe/u.test(value) && !passesExtraRegex(value)) {
      context.report({
        message: message + extraMessage,
        node: comment
      });
    }
  };

  return {
    GenericTypeAnnotation(node) {
      if (isIdentifier(node.id, /\$FlowFixMe/u)) {
        context.report({
          message,
          node: node.id
        });
      }
    },

    Program() {
<<<<<<< Updated upstream
      context.getSourceCode().getAllComments().filter(function (comment) {
        return comment.type === 'Block' || comment.type === 'Line';
      }).forEach(handleComment);
=======
      for (const comment of context.getSourceCode().getAllComments().filter(node => {
        return node.type === 'Block' || node.type === 'Line';
      })) {
        handleComment(comment);
      }
>>>>>>> Stashed changes
    }
  };
};

exports.default = {
  create,
  schema
};
module.exports = exports['default'];