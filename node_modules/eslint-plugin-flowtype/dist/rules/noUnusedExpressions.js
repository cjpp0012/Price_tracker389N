'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

<<<<<<< Updated upstream
var _noUnusedExpressions = require('eslint/lib/rules/no-unused-expressions');

var _noUnusedExpressions2 = _interopRequireDefault(_noUnusedExpressions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
=======
var _getBuiltinRule = require("../utilities/getBuiltinRule");
>>>>>>> Stashed changes

var meta = _noUnusedExpressions2.default.meta; // A wrapper around ESLint's core rule no-unused-expressions, additionally ignores type cast
// expressions.
<<<<<<< Updated upstream

var create = function create(context) {
  var coreChecks = _noUnusedExpressions2.default.create(context);

  return {
    ExpressionStatement(node) {
      if (node.expression.type !== 'TypeCastExpression') {
        coreChecks.ExpressionStatement(node);
      }
=======
const noUnusedExpressionsRule = (0, _getBuiltinRule.getBuiltinRule)('no-unused-expressions');
const {
  meta
} = noUnusedExpressionsRule;

const create = context => {
  const coreChecks = noUnusedExpressionsRule.create(context);
  return {
    ExpressionStatement(node) {
      if (node.expression.type === 'TypeCastExpression' || node.expression.type === 'OptionalCallExpression') {
        return;
      } // eslint-disable-next-line @babel/new-cap


      coreChecks.ExpressionStatement(node);
>>>>>>> Stashed changes
    }
  };
};

exports.default = {
  create,
  meta
};
module.exports = exports['default'];