"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateCellHeight = void 0;
const wrapCell_1 = require("./wrapCell");
/**
 * Calculates height of cell content in regard to its width and word wrapping.
 */
<<<<<<< HEAD:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/calculateCellHeight.js
<<<<<<< Updated upstream:node_modules/table/dist/calculateCellHeight.js
exports.default = function (value, columnWidth) {
  let useWrapWord = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!_lodash2.default.isString(value)) {
    throw new TypeError('Value must be a string.');
  }

  if (!Number.isInteger(columnWidth)) {
    throw new TypeError('Column width must be an integer.');
  }

  if (columnWidth < 1) {
    throw new Error('Column width must be greater than 0.');
  }

  if (useWrapWord) {
    return (0, _wrapWord2.default)(value, columnWidth).length;
  }

  return Math.ceil((0, _stringWidth2.default)(value) / columnWidth);
};
=======
const calculateCellHeight = (value, columnWidth, useWrapWord = false) => {
    return (0, wrapCell_1.wrapCell)(value, columnWidth, useWrapWord).length;
};
exports.calculateCellHeight = calculateCellHeight;
//# sourceMappingURL=calculateCellHeight.js.map
>>>>>>> Stashed changes:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/calculateCellHeight.js
=======
const calculateCellHeight = (value, columnWidth, useWrapWord = false) => {
    return wrapCell_1.wrapCell(value, columnWidth, useWrapWord).length;
};
exports.calculateCellHeight = calculateCellHeight;
>>>>>>> parent of 1d71be913 (fixed):node_modules/table/dist/calculateCellHeight.js
