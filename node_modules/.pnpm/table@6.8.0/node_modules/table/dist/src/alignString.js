"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.alignString = void 0;
const string_width_1 = __importDefault(require("string-width"));
const utils_1 = require("./utils");
const alignLeft = (subject, width) => {
    return subject + ' '.repeat(width);
};
const alignRight = (subject, width) => {
    return ' '.repeat(width) + subject;
};
const alignCenter = (subject, width) => {
<<<<<<< HEAD:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
<<<<<<< Updated upstream:node_modules/table/dist/alignString.js
  let halfWidth;

  halfWidth = width / 2;

  if (halfWidth % 2 === 0) {
    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth);
  } else {
    halfWidth = Math.floor(halfWidth);

    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth + 1);
  }
=======
    return ' '.repeat(Math.floor(width / 2)) + subject + ' '.repeat(Math.ceil(width / 2));
};
const alignJustify = (subject, width) => {
    const spaceSequenceCount = (0, utils_1.countSpaceSequence)(subject);
    if (spaceSequenceCount === 0) {
        return alignLeft(subject, width);
    }
    const addingSpaces = (0, utils_1.distributeUnevenly)(width, spaceSequenceCount);
=======
    return ' '.repeat(Math.floor(width / 2)) + subject + ' '.repeat(Math.ceil(width / 2));
};
const alignJustify = (subject, width) => {
    const spaceSequenceCount = utils_1.countSpaceSequence(subject);
    if (spaceSequenceCount === 0) {
        return alignLeft(subject, width);
    }
    const addingSpaces = utils_1.distributeUnevenly(width, spaceSequenceCount);
>>>>>>> parent of 1d71be913 (fixed):node_modules/table/dist/alignString.js
    if (Math.max(...addingSpaces) > 3) {
        return alignLeft(subject, width);
    }
    let spaceSequenceIndex = 0;
    return subject.replace(/\s+/g, (groupSpace) => {
        return groupSpace + ' '.repeat(addingSpaces[spaceSequenceIndex++]);
    });
<<<<<<< HEAD:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
>>>>>>> Stashed changes:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
=======
>>>>>>> parent of 1d71be913 (fixed):node_modules/table/dist/alignString.js
};
/**
 * Pads a string to the left and/or right to position the subject
 * text in a desired alignment within a container.
 */
<<<<<<< HEAD:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
<<<<<<< Updated upstream:node_modules/table/dist/alignString.js

exports.default = (subject, containerWidth, alignment) => {
  if (!_lodash2.default.isString(subject)) {
    throw new TypeError('Subject parameter value must be a string.');
  }

  if (!_lodash2.default.isNumber(containerWidth)) {
    throw new TypeError('Container width parameter value must be a number.');
  }

  const subjectWidth = (0, _stringWidth2.default)(subject);

  if (subjectWidth > containerWidth) {
    // console.log('subjectWidth', subjectWidth, 'containerWidth', containerWidth, 'subject', subject);

    throw new Error('Subject parameter value width cannot be greater than the container width.');
  }

  if (!_lodash2.default.isString(alignment)) {
    throw new TypeError('Alignment parameter value must be a string.');
  }

  if (alignments.indexOf(alignment) === -1) {
    throw new Error('Alignment parameter value must be a known alignment parameter value (left, right, center).');
  }

  if (subjectWidth === 0) {
    return ' '.repeat(containerWidth);
  }

  const availableWidth = containerWidth - subjectWidth;

  if (alignment === 'left') {
    return alignLeft(subject, availableWidth);
  }

  if (alignment === 'right') {
    return alignRight(subject, availableWidth);
  }

  return alignCenter(subject, availableWidth);
};
=======
const alignString = (subject, containerWidth, alignment) => {
    const subjectWidth = (0, string_width_1.default)(subject);
=======
const alignString = (subject, containerWidth, alignment) => {
    const subjectWidth = string_width_1.default(subject);
>>>>>>> parent of 1d71be913 (fixed):node_modules/table/dist/alignString.js
    if (subjectWidth === containerWidth) {
        return subject;
    }
    if (subjectWidth > containerWidth) {
        throw new Error('Subject parameter value width cannot be greater than the container width.');
    }
    if (subjectWidth === 0) {
        return ' '.repeat(containerWidth);
    }
    const availableWidth = containerWidth - subjectWidth;
    if (alignment === 'left') {
        return alignLeft(subject, availableWidth);
    }
    if (alignment === 'right') {
        return alignRight(subject, availableWidth);
    }
    if (alignment === 'justify') {
        return alignJustify(subject, availableWidth);
    }
    return alignCenter(subject, availableWidth);
};
exports.alignString = alignString;
<<<<<<< HEAD:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
//# sourceMappingURL=alignString.js.map
>>>>>>> Stashed changes:node_modules/.pnpm/table@6.8.0/node_modules/table/dist/src/alignString.js
=======
>>>>>>> parent of 1d71be913 (fixed):node_modules/table/dist/alignString.js
